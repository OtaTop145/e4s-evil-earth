{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","count","setCount","type","setType","showEA","setShowEA","showEB","setshowEB","handleChangeForCheck","e","target","value","checked","typeMap","maxCount","includes","indexArray","colorMapA","concat","colorMapB","centerStyle","display","alignItems","justifyContent","buttonStyle","color","border","List","ListItem","FormControl","component","style","FormLabel","sx","RadioGroup","row","name","onChange","event","FormControlLabel","control","Radio","label","FormGroup","Button","onClick","Box","height","width","Grid","container","spacing","columns","Array","from","map","_","index","item","xs","Paper","backgroundColor","Checkbox","defaultChecked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef97397f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormGroup from '@mui/material/FormGroup';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport './App.css';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  const [type, setType] = useState('A');\n\n  const [showEA, setShowEA] = useState(true)\n\n  const [showEB, setshowEB] = useState(true)\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setType((event.target as HTMLInputElement).value);\n    setCount(0);\n  };\n\n  const handleChangeForCheck = (e:any) => {\n    const {value, checked} = e.target;\n    if(value === 'EA'){\n      setShowEA(checked)\n    }else{\n      setshowEB(checked)\n    }\n  }\n\n  const typeMap :any = {\n    'A':{\n      'colorMapA':{\n        '0':[5],\n        '1': [0,1,2,4,6,8,9,10],\n        '2': [3,7,11,15,12,13,14,15]\n      },\n      'colorMapB':{\n        '0':[10],\n        '1': [5,6,7,9,11,13,14,15],\n        '2': [0,1,2,3,4,8,12]\n      }\n    },\n    'B': {\n      'colorMapA':{\n        '0':[6],\n        '1': [1,2,3,5,7,9,10,11],\n        '2': [0,4,8,12,13,14,15]\n      },\n      'colorMapB':{\n        '0':[9],\n        '1': [4,5,6,8,10,12,13,14],\n        '2': [0,1,2,3,7,11,15]\n      }\n    },\n    'C': {\n      'colorMapA':{\n        '0':[0],\n        '1': [1,4,5],\n        '2': [2,6,8,9,10],\n        '3': [3,7,11,15,12,13,14],\n      },\n      'colorMapB':{\n        '0':[15],\n        '1': [10,11,14],\n        '2': [5,6,7,9,13],\n        '3': [0,1,2,3,4,8,12],\n      }\n    },\n    'D': {\n      'colorMapA':{\n        '0':[3],\n        '1': [2,6,7],\n        '2': [1,5,9,10,11],\n        '3': [0,4,8,12,13,14,15],\n      },\n      'colorMapB':{\n        '0':[12],\n        '1': [8,9,13],\n        '2': [4,5,6,10,14],\n        '3': [0,1,2,3,7,11,15],\n      }\n    },\n  }\n\n  let maxCount = ['A','B'].includes(type) ? 2 : 3\n\n  let indexArray = (showEA ? typeMap[`${type}`].colorMapA[`${count}`] : []).concat(showEB ? typeMap[`${type}`].colorMapB[`${count}`] : []);\n\n  const centerStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n};\n\n  const buttonStyle = {\n    color: 'black', \n    border:1\n  }\n  return (\n    <div>\n      <div>\n        <List>\n        <ListItem>There are 4 Evil Earth pattern</ListItem>\n        <ListItem>Black = explosion, white = safe</ListItem>\n        <ListItem>Click 'Forward' will show the explosion pattern</ListItem>\n        <ListItem>Checkbox allow to show individual explosion or both</ListItem>\n        </List>\n      </div>\n      <FormControl component=\"fieldset\" style={centerStyle}>\n      <FormLabel sx={{color: 'black'}} >Type</FormLabel>\n      <RadioGroup row name=\"row-radio-buttons-group\"\n      value={type}\n      onChange={handleChange}>\n        <FormControlLabel value=\"A\" control={<Radio />} label=\"A\" />\n        <FormControlLabel value=\"B\" control={<Radio />} label=\"B\" />\n        <FormControlLabel value=\"C\" control={<Radio />} label=\"C\" />\n        <FormControlLabel value=\"D\" control={<Radio />} label=\"D\" />\n      </RadioGroup>\n    </FormControl>\n    <FormGroup row={true}  style={centerStyle}>\n    <Button sx={buttonStyle} onClick={() => (count < maxCount) && setCount(count + 1)}>forward</Button>\n      <Button sx={buttonStyle} onClick={() => (count > 0) && setCount(count - 1)}>backward</Button>\n      <Button sx={buttonStyle} onClick={() => setCount(0)}>reset</Button>\n    </FormGroup>\n    <div style={centerStyle}>\n    <Box \n    sx={{\n      height: 450,\n      width: 450,\n    }}>\n    <Grid container spacing={0} columns={16}>\n          {Array.from(Array(16)).map((_,index) => (\n            <Grid key={index} item xs={4}>\n              <Paper sx={{ display: 'block', height: 100, width: 100, backgroundColor: `${indexArray.includes(index) ? 'black' :'white'}` }}>\n                <p>{index}</p>\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n      <FormGroup>\n      <FormControlLabel control={<Checkbox defaultChecked onChange={handleChangeForCheck} value='EA'/>} label=\"ExplosionA\" />\n      <FormControlLabel control={<Checkbox defaultChecked onChange={handleChangeForCheck} value='EB'/>} label=\"ExplosionB\" />\n    </FormGroup>\n    </div>\n    <div>Made by Ota Top (Crystal-Malboro)</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}